3. Use of main method
The main method is the entry point of any Java application.
It tells the JVM where to start executing the program.

4. Add two numbers entered by the user
import java.util.Scanner;
public class AddNumbers {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter first number: ");
        int num1 = input.nextInt();
        System.out.print("Enter second number: ");
        int num2 = input.nextInt();
        int sum = num1 + num2;
        System.out.println("Sum: " + sum);
    }
}

5. Difference between int, Integer, and String
int: primitive type
Integer: wrapper class for int (Object)
String: class to represent a sequence of characters

Control Structures

6. Check if a number is even or odd
int num = 5;
if (num % 2 == 0) {
    System.out.println("Even");
} else {
    System.out.println("Odd");
}

7. Find the largest among three numbers
int a = 10, b = 25, c = 15;
int largest = (a > b) ? (a > c ? a : c) : (b > c ? b : c);
System.out.println("Largest: " + largest);

8. Difference between while, for, do-while
while: entry-controlled loop
for: concise loop with init, condition, update in one line
do-while: exit-controlled loop, runs at least once

9. Multiplication table of any number
int n = 5;
for (int i = 1; i <= 10; i++) {
    System.out.println(n + " x " + i + " = " + (n * i));
}

10. Four pillars of OOP
Encapsulation: bundling data and methods
Inheritance: acquiring properties from another class
Polymorphism: same method behaving differently
Abstraction: hiding details and showing essentials

11. Student class
class Student {
    String name;
    String matricNo;
    double score;

    void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Matric No: " + matricNo);
        System.out.println("Score: " + score);
    }
}

12. Method Overloading
class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}

13. Inheritance
class Person {
    String name;
    int age;

    void introduce() {
        System.out.println("Hi, I am " + name);
    }
}

class Teacher extends Person {
    String subject;

    void teach() {
        System.out.println("I teach " + subject);
    }
}

General Practices

14. Clean code: readable, maintainable, and efficient
Practices:
Use meaningful variable names
Keep methods short and focused
Write comments and follow naming conventions

Avoid long methods
Improves readability
Easier debugging and testing
Encourages code reuse through modular design


16. Naming Conventions in Java:

Classes: Use PascalCase. E.g., StudentDetails

Variables: Use camelCase. E.g., studentName

Methods: Use camelCase. E.g., calculateAverage()


public class StudentDetails {
    String studentName;
    int studentAge;

    public void displayDetails() {
        System.out.println(studentName + " " + studentAge);
    }
}

17. Importance of Breaking Java Program into Methods:

Enhances modularity

Improves readability

Facilitates reuse

Simplifies debugging and maintenance


18. DRY Concept in Java:

Avoid code duplication by reusing methods.


public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }

    public void displaySum() {
        int result = add(5, 10);
        System.out.println("Sum: " + result);
    }
}

19. Benefits of Using Classes and Objects:

Encapsulation of data and methods

Promotes code reusability

Improves readability and organization

Facilitates debugging and testing


Testing & Debugging

20. Importance of Testing:

Ensures correctness and reliability

Helps identify and fix bugs early

Prevents regression issues


21. Syntax vs Runtime vs Logic Errors:

Syntax Error: Compilation error due to incorrect code format.

Runtime Error: Error during program execution (e.g., divide by zero).

Logic Error: Incorrect output due to flawed logic.


22. Testing Average Method:

public double calculateAverage(int[] nums) {
    int sum = 0;
    for (int num : nums) sum += num;
    return (double) sum / nums.length;
}

int[] values = {10, 20, 30, 40, 50};
System.out.println("Average: " + calculateAverage(values));

Documentation & Comments

23. Why Write Comments:

Improves code readability

Helps future maintenance

Assists team collaboration


24. JavaDoc Comments:

JavaDoc is a tool for generating documentation from comments

Regular comments donâ€™t generate documentation


/**
 * This class performs math operations.
 */

25. Java Method with JavaDoc:

/**
 * Calculates the square of a number.
 * @param number input integer
 * @return square of the number
 */
public int square(int number) {
    return number * number;
}

Versioning & Collaboration

26. Version Control Importance:

Tracks changes

Facilitates collaboration

Allows rollback and history


27. Explaining Code Refactoring:

Improving code structure without changing behavior

Makes code cleaner and more efficient


28. Tools for Collaboration:

Git & GitHub: Version control and repository management

JIRA: Task and issue tracking

Slack: Communication


Good Practices Summary

29. 5 Best Practices:

Follow naming conventions

Write modular code

Add meaningful comments

Use version control

Test thoroughly


30. Code Readability vs Smart Code:

Readable code is easier to maintain, debug, and understand

Smart code may be complex and hard to manage


Advanced-Level Questions

31. Student Grade Tracker (CLI App):

Use Java classes to represent students and grades

Provide menu options for adding, updating, viewing records


32. ATM System Simulation:

import java.util.Scanner;

public class ATM {
    static double balance = 1000;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Check Balance\n2. Deposit\n3. Withdraw\n4. Exit");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1: System.out.println("Balance: " + balance); break;
                case 2:
                    System.out.print("Enter deposit amount: ");
                    balance += scanner.nextDouble(); break;
                case 3:
                    System.out.print("Enter withdraw amount: ");
                    double amount = scanner.nextDouble();
                    if (amount <= balance) balance -= amount;
                    else System.out.println("Insufficient funds");
                    break;
                case 4: System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }
}
